SOLID - принципы проектирования

пять принципов, рекомендованных при проектировании ООП программ

S - Single responsibility principle (принцип единственной ответственности)
O - Open-Close principle 
L - Liskov substitution principle - принцип заменяемости Лисков 
I - Interface segregation principle - принцип разделения интерфейсов
D - Dependency Injection principle - принци инверсии управления	


S (SRP)

Один обьект должен решать одну задачу
задача одна - не нагружать другими задачами
задача решается - все что нужно содержится в объекте

Плохо:                                Лучше: 

Helper{									Hasher{						Saver{				Validator{

	CreateHash()						CreateHash()				SaveToFile()		Validator();
	SaveFile()
	ValidForm()
}										}							}					}



O (OCP) 

Классы закрыты для изменений, но открыты для дополнения 
Обновления, доработки (кроме исполнения ошибок) должны реализовываться в виде 
дополнений, а не изменения работающего кода 
=> простота отмены изменений
Плохо:
переписывать код с учетом новых требований 
Лучше:
создать класс наследник либо дополнить его новыми методами


L (LSP)

При замене класса на наследника не должно быть проблем
Если алгортм работает с классом С, то он должен нормально 
работать с любым наследником класса С
Корелирует с ОСР, наследник не должен переопределять поведение
базового класса, только расширять не дополнять его

С {Print {cw()}}

Плохо:										Лучше:
B:C{Print{return string}}					B:C{Print {base.Print, other}}


I (ISP)

Лучше создавать интерфейсы минимально возможного наполнения
не использовать нагруженные интерфейсы

Аналогия: разъем видео + звук /раздельно видио и звук

Плохо:								Лучше:														

IPrintable{							IConsolePrintable{PrintConsole}
	PrintConsole{}					IGdcPrintable{PrintGDC}
	PrintGDC{}						IPDFPrintable{PrintPDF}
	PrintPDF{}
}



D (DIP) / IoC

Програмирование ведется на уровне интерфейсов (а не конкретных реализаций)
централизация создание общих обектов (на уровне контейнера зависимостей)

Плохо:								Лучше
Obj1{hasher = new Hasher;}			Obj1{[Dependency] hasher}
Obj2{hasher = new Hasher;}			Obj2{[Dependency] hasher}

____________________________________________________________________________

IoC - Inversion of Control
Инверсия зависимости это принцип объектно-ориентированного программирования, который служит для уменьшения связанности слоёв сложных приложений. Принцип заключается в том что каждый слой приложение работает с нижестоящим слоем не на прямую, а опосредованно(через слой абстракций). В результате это позволяет легко и безболезненно заменить реализацию каждого из слоёв на новую, при этом не затронув и работу вышестоящих слоёв.

DI контейнер это реализация, которая позволяет применить принцип инверсии зависимостей. Она знает о всех интерфейсах и их реализациях в системе и умеет их сопоставлять. Перед началом работы с контейнером необходимо зарегистрировать известные типы и их сопоставления(интерфейс-->реализация).

Scope это минимальный квант времени жизни экземпляра реализации интефейса. Другими словами Scope определяет когда необходимо создать новый экземпляр реализации, а когда можно использовать старый(ранее использованный экземпляр). Основные виды Scope:
  1.   Transient - создаётся новый экземпляр на каждый запрос к контейнеру
  2.   Thread - создаётся новый экземпляр на каждый поток
  3.   Single(Singleton) - всегда один экземпляр
   ...
Также нужно отметить что большинство реализаций DI контейнеров, позволяют объявить собственный Scope и задать ему собственную поведенческую модель.

