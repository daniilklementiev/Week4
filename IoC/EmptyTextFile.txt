SOLID
D:
IOC / Inversion of Control / Dependecy Injection

Контейнер зависимостей - можно представить как некоторый "словарь" в котором типу сопоставлен объект (instance). Например, типу Random объект rnd
При запросе сущности определенного типа возвращается ее объект, либо выбрасывается исключение из-за отсутствия

Контейнер поддерживает функции:
- Регистрации - регистрация ключей словаря (типов).
- Разрешения - выборки всех необходимых объектов по заданным типам
- Разрушения - управление жизненным циклом зарегестрированных объектов

Контейнер Unity
Устанавливаем пакет
Описываем и создаем контейнер
public static UnityContainer container;
  container = new UnityContainer();

  container.RegisterType<Greater>()
объект будет создан при первом запросе, если запросов не будет, объект не будет создан. При повторных запросах будет подставлен первый объект (новый не создается)

Регистрируем типы и/или объекты
  var globalRandom = new Random();
  container.RegisterInstance<Random>(globalRandom);

Описываем классы с зависимостями
class RandomInt
    {
        [Dependency]        // атрибут указывает контейнеру, что 
это свойство нужно внедрить - взять 
из зарегистрированных
        public Random rnd { get; set; }    // после внедрения это ссылка на 
globalRandom
    }

Создание объектов производим через контейнер (разрешение 0 Resolve)
var rndInt = (RandomInt)container.Resolve<RandomInt>();